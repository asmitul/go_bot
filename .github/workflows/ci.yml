name: Continuous Integration  # ✅ 持续集成

on:
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Code  # ✅ 代码规范检查
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code  # ✅ 拉取代码
        uses: actions/checkout@v4

      - name: Set up Go  # ✅ 安装 Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Run golangci-lint  # ✅ 执行代码静态检查
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Unit Tests  # ✅ 单元测试
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.25']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report  # ✅ 保留本地覆盖率 HTML
        run: |
          go tool cover -html=coverage.out -o coverage.html

  integration-test:
    name: Integration Tests  # ✅ 集成测试
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Run integration tests
        env:
          MONGO_URI: mongodb://localhost:27017
          TEST_DATABASE: test_telegram_bot
        run: |
          go test -v -tags=integration ./test/integration/...

  build:
    name: Build Binary  # ✅ 构建可执行文件
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Build binary
        run: |
          go build -v -o bin/bot ./cmd/bot

  docker-build:
    name: Docker Build Test  # ✅ Docker 构建测试
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployments/docker/Dockerfile
          push: false  # ✅ 只构建不推送
          tags: telegram-bot:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan  # ✅ 安全扫描
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec-results.sarif

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif
